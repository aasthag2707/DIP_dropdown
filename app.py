# -*- coding: utf-8 -*-
"""PIET18CS006_Aastha_DIP-Q.1
Automatically generated by Colaboratory.
Original file is located at
    https://colab.research.google.com/drive/1oI_WlnWiW81lqJb0dO3hyuZTtCv1oUWN
# **QUE 1:** Provide Drop Down with various Transformations on an image and then perform Scaling in X direction and in Y directions for which the scaling factors must be taken from user as input using GUI, on the following images. Also Deploy the same on Heruko and provide the URL
"""

import numpy as np
import pandas as pd
import cv2 as cv
from google.colab.patches import cv2_imshow # for image display
from skimage import io
from PIL import Image 
import matplotlib.pylab as plt
#import matplotlib.image as mpimg 
#from matplotlib.pyplot import imshow
#%matplotlib inline

#@title Transformation Task 
Text = "Performing the Scaling transformation" #@param{type: "string"}
Transformation_name = 'Scaling' #@param["Scaling", "Rotation", "Translation", "Reflection","Shearing"]
X_cordinate= '0.5' #@param ["0","0.5","1","1.5","2"] {allow-input: true}
Y_cordinate= '1' #@param ["0","0.5","1","1.5","2"] {allow-input: true}
print(Text)
print("Transformation-name =",Transformation_name)
print("Cordinates are: ")
print("x =",X_cordinate)
print("y =",Y_cordinate)

img_S = cv.imread("/content/Screenshot (158).png")
# convert from BGR to RGB so we can plot using matplotlib
image1 = cv.cvtColor(img_S, cv.COLOR_BGR2RGB)
print(image1.shape)
#rows, cols, dim = image1.shape
#print(rows)

# disable x & y axis
plt.axis('off')
# show the image
plt.imshow(image1)
plt.show()
# get the image shape
rows, cols, dim = image1.shape
#transformation matrix for Scaling
M = np.float32([[1, 0  , 0],
            	[0,   0.5, 0],
            	[0,   0,   1]])
# apply a perspective transformation to the image
scaled_img = cv.warpPerspective(image1,M,(cols*2,rows*2))
# disable x & y axis
#plt.axis('off')
# show the resulting image
cv2_imshow(scaled_img)
#plt.imshow(scaled_img)
print(scaled_img.shape)
#plt.show()
# save the resulting image to disk
plt.imsave("fruits_scaled.jpg", scaled_img)
